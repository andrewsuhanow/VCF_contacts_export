{"remainingRequest":"C:\\Open Server 5.3.0\\OSPanel\\domains\\laravel-vue-cli-vuetify\\resources\\frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Open Server 5.3.0\\OSPanel\\domains\\laravel-vue-cli-vuetify\\resources\\frontend\\src\\components\\FirstPage.vue?vue&type=style&index=0&id=753901df&scoped=true&lang=css&","dependencies":[{"path":"C:\\Open Server 5.3.0\\OSPanel\\domains\\laravel-vue-cli-vuetify\\resources\\frontend\\src\\components\\FirstPage.vue","mtime":1590080815692},{"path":"C:\\Open Server 5.3.0\\OSPanel\\domains\\laravel-vue-cli-vuetify\\resources\\frontend\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Open Server 5.3.0\\OSPanel\\domains\\laravel-vue-cli-vuetify\\resources\\frontend\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\Open Server 5.3.0\\OSPanel\\domains\\laravel-vue-cli-vuetify\\resources\\frontend\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\Open Server 5.3.0\\OSPanel\\domains\\laravel-vue-cli-vuetify\\resources\\frontend\\node_modules\\vuetify-loader\\lib\\loader.js","mtime":1574476662000},{"path":"C:\\Open Server 5.3.0\\OSPanel\\domains\\laravel-vue-cli-vuetify\\resources\\frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Open Server 5.3.0\\OSPanel\\domains\\laravel-vue-cli-vuetify\\resources\\frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5oaWRkZW5DbHMgewogICAgLyp2aXNpYmlsaXR5OiBoaWRkZW47Ki8KICAgIGRpc3BsYXk6IG5vbmU7Cn0KCg=="},{"version":3,"sources":["FirstPage.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2UA;AACA;AACA;AACA","file":"FirstPage.vue","sourceRoot":"src/components","sourcesContent":["<template>\n    <v-app>\n  <div class=\"FirstPage\">\n    <h1>------Главная страница-------</h1>\n<!--      <v-btn large color=\"primary\">Primary</v-btn>-->\n  </div>\n\n        <v-container  v-for=\"(item, index) in mString\" :key=\"index\" :class=\"'cardNumClass'+index\"  >\n\n            <!--                  //  V-APP КОМПОНЕНТА   --  СДЕЛАННО НЕКОРPЕКТНО-->\n\n<!--            :findingText=\"findingText\"             //  текст вбитый в поиске-->\n<!--            @setHideCardIndex=\"setHideCardIndex\"   // видим - невидим, при поиске              -->\n            <FirstPageCard\n                        :fileData=\"item\"\n                        :index=\"index\"\n                        :isDisabledCardIndex=\"isDisabledCardIndex\"\n                        :isEditableNow=\"isEditableNow\"\n                        @btnDel=\"btnDel\"\n                        @EditData=\"EditData\"\n                        @isEdit=\"isEdit\"\n                        :findingText=\"findingText\"\n                        @setHideCardIndex=\"setHideCardIndex\"\n            ></FirstPageCard>\n            <!--                  :isFindedCard=\"isFindedCard\"-->\n\n        </v-container>\n\n\nпропущено место модального окна   НАЧАЛО    Этого быть недолжно\n        <!--       модальное окно добавления новой карты    -->\n        <v-row justify=\"center\">\n            <v-dialog v-model=\"modalDialog\" persistent max-width=\"590\">\n                <v-card>\n                    <v-card-title class=\"headline\">Добавить контакт</v-card-title>\n                    <v-card-text>\n                        <v-container>\n                            <v-row>\n                                <v-col cols=\"12\">\n                                    <v-text-field v-model=\"newCard.FN\" label=\"Имя\" required></v-text-field>\n                                </v-col>\n                                <v-col cols=\"12\">\n                                    <v-text-field v-model=\"newCard.TEL\" label=\"Телефон\" required></v-text-field>\n                                </v-col>\n                                <v-col cols=\"12\">\n                                    <v-text-field v-model=\"newCard.EMAIL\" label=\"Email\" required></v-text-field>\n                                </v-col>\n                            </v-row>\n                        </v-container>\n                    </v-card-text>\n                    <v-card-actions>\n                        <v-spacer></v-spacer>\n                        <v-btn color=\"white\" text @click=\"btnCancelAddCard\">Отмена</v-btn>\n                        <v-btn color=\"white\" text @click=\"confirmNewCardModal\">Добавить</v-btn>\n                        <!--                        <v-btn color=\"green darken-1\" text @click=\"dialog = false\">Agree</v-btn>-->\n                    </v-card-actions>\n                </v-card>\n            </v-dialog>\n        </v-row>\n        пропущено место модального окна   КОНЕЦ    Этого быть недолжно\n\n\n    </v-app>\n</template>\n\n<script>\n\nimport axios from \"axios\";\n\nimport FirstPageCard from './FirstPageCard';\n\nexport default {\n  name: 'FirstPage',\n    props: ['findingText', 'fButtonAddCardIsVisible'],\n\n    components: {\n        FirstPageCard,\n    },\n\n    data() {\n        return {\n\n            modalDialog: false,\n\n            newCard: {\n                //    FN: ''\n                //    TEL: '+00000000002',\n                //  EMAIL: 'xxx@xx2.com',\n            },\n\n            mString: [\n                // {\n                //     ID: -1\n                //     FN: 'xx2',\n                //     TEL: '+00000000002',\n                //     EMAIL: 'xxx@xx2.com',\n                // }\n            ],\n            isDisabledCardIndex: null,\n            isEditableNow: false,\n        }\n    },\n\n    methods:{\n\n\n        // Добавляем новую карту\n        btnAddCard(){\n            //console.log('Console222222222');\n            this.modalDialog = true;\n        },\n\n        // Отменить Добавку новой карты\n        btnCancelAddCard(){\n            //console.log('Console222222222');\n            this.modalDialog = false;\n        },\n\n        confirmNewCardModal(){\n            this.modalDialog = false;\n\n            // console.log( this.newCard.FN)\n            // console.log( this.newCard.TEL)\n            // console.log( this.newCard.EMAIL)\n\n            // если поля пустые -> обрабатываем их\n            if(this.newCard.FN == undefined){\n                this.newCard.FN = \"none\"\n            }\n            if(this.newCard.TEL == undefined){\n                this.newCard.TEL = \"none\"\n            }\n            if(this.newCard.EMAIL == undefined){\n                this.newCard.EMAIL = \"none\"\n            }\n\n            if(this.newCard.FN != \"none\" ||\n                this.newCard.TEL != \"none\" ||\n                this.newCard.EMAIL != \"none\" ){\n\n                // добавить карту в базу данных\n                axios.post(\"http://laravel-vue-cli-vuetify/api/addMewCard\" , {newCard: this.newCard})\n                    .then(res => {\n                            console.log(res.data.status)\n                            //console.log(res.data.aaa)\n                        if(res.data.status == \"success---addMewCard\") {\n\n                            axios.post(\"http://laravel-vue-cli-vuetify/api/loadDataFromBD\", {isTime: 0})\n                                 .then(res => {\n                                     console.log(res.data.status)\n                                     //console.log(res.data.DataCards)\n\n                                     // очищаем массив отображения и заново его заполняем с сервера\n                                     this.mString = [];\n                                     for(let i = 0; i < res.data.DataCards.length; i++){\n                                         this.mString.push({\n                                             ID: res.data.DataCards[i].id,\n                                             FN: res.data.DataCards[i].name,\n                                             TEL: res.data.DataCards[i].telephone,\n                                             EMAIL: res.data.DataCards[i].email\n                                         });\n                                     }\n\n                                     // Сортировка по алфавиту имени 'FN'\n                                     this.mString.sort(function(a,b){\n                                         let nameA=a.FN.toLowerCase();\n                                         let nameB=b.FN.toLowerCase();\n                                         if (nameA < nameB) return -1;\n                                         if (nameA > nameB)  return 1;\n                                         return 0\n                                     });\n                                     //this.mString = res.data.DataCards;\n                                     //console.log(this.mString)\n\n                                     this.newCard.FN = undefined;\n                                     this.newCard.TEL = undefined;\n                                     this.newCard.EMAIL = undefined;\n                                 });\n\n                        }\n                    });\n            }else{\n                console.log('пусто')\n                this.newCard.FN = undefined;\n                this.newCard.TEL = undefined;\n                this.newCard.EMAIL = undefined;\n                return\n            }\n\n\n\n        } ,\n\n        // удаление из массива из дочернего компонента\n        btnDel(i){\n            axios.post(\"http://laravel-vue-cli-vuetify/api/DeleteCardAndAddToStore\" , {id: this.mString[i].ID})\n                .then(res => {\n                    console.log(res.data.status)\n                    //console.log(res.data.card)\n\n                    this.mString.splice(i, 1)\n                    //console.log(this.mString);\n\n\n                    // стираем массив с данными и загружаем его наново\n\n                    // this.mString = [];\n                    // axios.post(\"http://laravel-vue-cli-vuetify/api/loadTimeDataFromBD\" , {})\n                    //     .then(res => {\n                    //         console.log(res.data.status)\n                    //\n                    //         //console.log(res.data.file)\n                    //         for(let i =0; i< res.data.DataCards.length; i++){\n                    //             this.mString.push({\n                    //                 ID: res.data.DataCards[i].id,\n                    //                 FN: res.data.DataCards[i].name,\n                    //                 TEL: res.data.DataCards[i].telephone,\n                    //                 EMAIL: res.data.DataCards[i].email\n                    //             });\n                    //             //this.mString = res.data.DataCards\n                    //\n                    //         }\n                    //         console.log(i+1)\n                    //         // скролинг к месту открытой карточки\n                    //         // let x = document.querySelector(\".cardNumClass\"+(i+1)).offsetLeft;\n                    //         // let y = document.querySelector(\".cardNumClass\"+(i+1)).offsetTop;\n                    //         // window.scrollTo(x,y)\n                    //     });\n\n                });\n        },\n\n        // переход на станицу редактирования данных\n        isEdit(i){\n            this.isDisabledCardIndex = i;\n            this.isEditableNow = true;\n        },\n\n        // замена значения в массиве из дочернего компонента\n        EditData(i,FN,TEL,EMAIL){\n            this.isDisabledCardIndex = null;\n            this.isEditableNow = false;\n            this.mString[i].FN = FN;\n            this.mString[i].TEL = TEL;\n            this.mString[i].EMAIL = EMAIL;\n\n            axios.post(\"http://laravel-vue-cli-vuetify/api/UpdateCard\" , {\n\n                card: this.mString[i],\n            })\n                .then(res => {\n                    console.log(res.data.status)\n                    //console.log(res.data.fileData)\n                });\n        } ,\n\n        // делаем видимым-невидимым при поиске  (всем отрисованым элементам 'с классом' добавляем видимости или не...)\n        setHideCardIndex(val, cardNumClass){\n            if(cardNumClass== 'show'){\n                document.querySelector(\".cardNumClass\"+val).classList.remove('hiddenCls');\n            }\n            else if(cardNumClass == 'hide'){\n                document.querySelector(\".cardNumClass\"+val).classList.add('hiddenCls');\n            }\n            else if(cardNumClass == 'showAll'){\n                this.mString.forEach(function(el, index){\n                    document.querySelector(\".cardNumClass\"+index).classList.remove('hiddenCls');\n                });\n            }\n        },\n\n    },\n\n    mounted() {\n\n        // делаем кнопку добавления карт видимой\n        this.$emit('fButtonAddCardIsVisible', 1)\n\n        // загружаем начальные данные в массив\n        this.mString=[];\n        axios.post(\"http://laravel-vue-cli-vuetify/api/loadDataFromBD\" , {isTime: 0})\n            .then(res => {\n                console.log(res.data.status)\n\n                // задаем массив для отображения\n                for(let i =0; i< res.data.DataCards.length; i++){\n                    this.mString.push({\n                        ID: res.data.DataCards[i].id,\n                        FN: res.data.DataCards[i].name,\n                        TEL: res.data.DataCards[i].telephone,\n                        EMAIL: res.data.DataCards[i].email\n                    });\n                    //this.mString = res.data.DataCards\n                }\n\n                // Сортировка по алфавиту имени 'FN'\n                this.mString.sort(function(a,b){\n                    let nameA=a.FN.toLowerCase();\n                    let nameB=b.FN.toLowerCase();\n                    if (nameA < nameB) return -1;\n                    if (nameA > nameB)  return 1;\n                    return 0\n                });\n                //console.log(this.mString)\n\n\n                // если вводим индекс в адресную строку\n                if (this.$route.params.id != undefined && (this.mString.length == 0 || this.$route.params.id > this.mString.length)) {\n                    //console.log('1111111111111111111')\n                    this.$router.push({name: 'FirstPage'})\n                } else if (this.$route.params.id != undefined && this.mString.length > 0) {\n                    //console.log('222222222222222')\n                    //this.$emit('isEdit', this.$route.params.id)\n                    this.isDisabledCardIndex = this.$route.params.id;\n                    this.isEditableNow = true;\n                    this.$router.push({name: 'FirstPageCardEdit', params: {id: this.$route.params.id}})\n                }\n\n            });\n\n    },\n    updated() {\n      console.log(\"updated  First Page\")\n    }\n\n}\n</script>\n\n<!-- Add \"scoped\" attribute to limit CSS to this component only -->\n<style scoped>\n\n    .hiddenCls {\n        /*visibility: hidden;*/\n        display: none;\n    }\n\n</style>\n"]}]}